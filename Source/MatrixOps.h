/*
  ==============================================================================

    MatrixOperationRotation.h
    Created: 4 Aug 2024 10:25:55am
    Author:  Louis Deng

  ==============================================================================
*/

#pragma once

#define MATDIM 16

template <typename SignalType>
class matrixOperation
{
public:
    matrixOperation()
    {
        init();
    }
    ~matrixOperation()
    {
        
    }
    
    SignalType lastOutAtChan(unsigned int chan) const
    {
        return outputVecStore[chan];
    }
    
    ///Mx1 input vector multiplied with MxM matrix, and compress output 1xM vector into a single value
    SignalType tick(std::vector<SignalType> inVec)
    {
        // matrix calculation -- not used in this version
        //tinyRotateTick();
        
        // check for inject
        checkModStrategyInject();
        
        // vector mult
        vecTick(inVec);
        
        // sum output vector into value
        outSamp = 0.0f;
        for (int i=0;i<inVec.size();i++)
        {
            outSamp+=inVec[i];
        }
        return outSamp;
    }
    
    
private:
    /// internal storage vector
    std::vector<SignalType> outputVecStore = std::vector<SignalType>(MATDIM);
    
    /// main matrix gain coefficient
    double gmat = 1/sqrt(2);   // [Stewart, Murphy 2007], also jot
    
    /// skeleton of main matrix 4x4
    std::vector<std::vector<double>> matrix0 = {
        {0,1,1,0},
        {-1,0,0,-1},
        {1,0,0,-1},
        {0,1,-1,0}
    };   // Jot 1991
    /// large main matrix 16x16
    std::vector<std::vector<double>> matrixL16 = {
    {0.87229673714533451089891968877055,-0.22342314919479885904074478730763,-0.09391457078981554906782491798367,-0.15379283451445252550726650042634,-0.10270288710055182346270186144466,-0.07652017208969812134267129977161,-0.11723407379521659510412945337521,-0.00332848921897941794553754668584,-0.05930485724368736444311878130975,-0.10405644320934927249400203663754,-0.04272021704481118037355358296736,-0.07365394763688984380856084044353,-0.16939297985782045263825068559527,-0.20072328254649710044255073171371,-0.15637768688881922840572258337488,-0.10732036344212275702503234242613},
    {-0.22342314919479885904074478730763,0.60911019436573754504138378251810,-0.16430816795196609425566691697895,-0.26906814002018419884620925586205,-0.17968376026161064773489783874538,-0.13387581055517019934519851176447,-0.20510678720928079976637548043072,-0.00582335585435786624863840899025,-0.10375676918303992912750999266791,-0.18205187335190461950240603528073,-0.07474112417393359575346067913415,-0.12886120968099865069511622550635,-0.29636136278206842709082025066891,-0.35117527070779430697911038805614,-0.27359046658236385596296713629272,-0.18776226258414208114544408090296},
    {-0.09391457078981554906782491798367,-0.16430816795196609425566691697895,0.93093405438925280748208024306223,-0.11310116688569998855129483672499,-0.07552898293522986028492027799075,-0.05627388805832907181514457306548,-0.08621539870088830437300231324116,-0.00244781244731962638327971149010,-0.04361353100375148922340784451990,-0.07652440496404924741291608825122,-0.03141697994339560928711563292381,-0.05416603088024657397525629676238,-0.12457370816170867944272515615012,-0.14761440316000859485079388377926,-0.11500209953117167260838726861039,-0.07892473257433095523705190998953},
    {-0.15379283451445252550726650042634,-0.26906814002018419884620925586205,-0.11310116688569998855129483672499,0.81478753620486943365364140845486,-0.12368492211500771438270618318711,-0.09215312044611886910239206827100,-0.14118480693137713810614286558121,-0.00400849422477335837894374392931,-0.07142074440464012130558302260397,-0.12531500756461147472187178664171,-0.05144788882858295636646417392512,-0.08870133093739124285903585587221,-0.20399969379664131818863381795381,-0.24173072704495363050014589134662,-0.18832539736134398800082578873116,-0.12924574146291895049287745678157},
    {-0.10270288710055182346270186144466,-0.17968376026161064773489783874538,-0.07552898293522986028492027799075,-0.12368492211500771438270618318711,0.91740318310587842809411540656583,-0.06153987313532408021110597928782,-0.09428324363983160705249275679307,-0.00267687328287992930275773773019,-0.04769478807244308116164432931328,-0.08368538829878724438771087079658,-0.03435691093545163027345168416105,-0.05923476737842090639185599343364,-0.13623103824498866698533561248041,-0.16142783015094985810122807379230,-0.12576373980252680828684219704883,-0.08631033321936643076810469210614},
    {-0.07652017208969812134267129977161,-0.13387581055517019934519851176447,-0.05627388805832907181514457306548,-0.09215312044611886910239206827100,-0.06153987313532408021110597928782,0.95414888699202027311230267514475,-0.07024700309964398980966393537528,-0.00199444056589901611703519179741,-0.03553564553167674888722871173741,-0.06235092795148894362355918019603,-0.02559808016572364189333832484863,-0.04413366285460197657730674336563,-0.10150077358836749608084204510305,-0.12027398344823037046324998300406,-0.09370197161946834663037719792555,-0.06430667859024209731533261447112},
    {-0.11723407379521659510412945337521,-0.20510678720928079976637548043072,-0.08621539870088830437300231324116,-0.14118480693137713810614286558121,-0.09428324363983160705249275679307,-0.07024700309964398980966393537528,0.89237684494981428517945687417523,-0.00305561770311618815729182152552,-0.05444300995217071781340223424195,-0.09552583441783951689885157065873,-0.03921798837104725071744937281437,-0.06761575342361503260235622292385,-0.15550604312783883331761103363533,-0.18426786906184708381140069377579,-0.14355775157846198397670889335132,-0.09852217653844876077418035720257},
    {-0.00332848921897941794553754668584,-0.00582335585435786624863840899025,-0.00244781244731962638327971149010,-0.00400849422477335837894374392931,-0.00267687328287992930275773773019,-0.00199444056589901611703519179741,-0.00305561770311618815729182152552,0.99991324543920645506744904196239,-0.00154573637005168441904690013189,-0.00271215270186034610941372413606,-0.00111347023316029432489504547021,-0.00191973458754664716603699492481,-0.00441510024586622574355176951144,-0.00523170095281372433959621304211,-0.00407586645214177284435308479260,-0.00279722432073322606685406022109},
    {-0.05930485724368736444311878130975,-0.10375676918303992912750999266791,-0.04361353100375148922340784451990,-0.07142074440464012130558302260397,-0.04769478807244308116164432931328,-0.03553564553167674888722871173741,-0.05444300995217071781340223424195,-0.00154573637005168441904690013189,0.97245907415304821963530912398710,-0.04832337382670770509207613940816,-0.01983908881126373452419286991244,-0.03420458297146942300281935445128,-0.07866538617720082726680885798487,-0.09321504674827056635688649066651,-0.07262113895706658051043547175141,-0.04983912463160065225986627979182},
    {-0.10405644320934927249400203663754,-0.18205187335190461950240603528073,-0.07652440496404924741291608825122,-0.12531500756461147472187178664171,-0.08368538829878724438771087079658,-0.06235092795148894362355918019603,-0.09552583441783951689885157065873,-0.00271215270186034610941372413606,-0.04832337382670770509207613940816,0.91521169364557897196732483280357,-0.03480971229273539108151069854102,-0.06001544242565458320282090198816,-0.13802647320529107255460132819280,-0.16355534215961239907777269309008,-0.12742122269400832368368980951345,-0.08744784631251870110624224707863},
    {-0.04272021704481118037355358296736,-0.07474112417393359575346067913415,-0.03141697994339560928711563292381,-0.05144788882858295636646417392512,-0.03435691093545163027345168416105,-0.02559808016572364189333832484863,-0.03921798837104725071744937281437,-0.00111347023316029432489504547021,-0.01983908881126373452419286991244,-0.03480971229273539108151069854102,0.98570892470905180360318809107412,-0.02463925007801894689896116119598,-0.05666656202534951780602767712480,-0.06714740097198727830640763158954,-0.05231259229812087324651415087828,-0.03590158244267603604438221509554},
    {-0.07365394763688984380856084044353,-0.12886120968099865069511622550635,-0.05416603088024657397525629676238,-0.08870133093739124285903585587221,-0.05923476737842090639185599343364,-0.04413366285460197657730674336563,-0.06761575342361503260235622292385,-0.00191973458754664716603699492481,-0.03420458297146942300281935445128,-0.06001544242565458320282090198816,-0.02463925007801894689896116119598,0.95751945658059189891986306975014,-0.09769884801380253336322567747629,-0.11576886769925015530091627624643,-0.09019216662298658315766175519457,-0.06189793629888689502349663484893},
    {-0.16939297985782045263825068559527,-0.29636136278206842709082025066891,-0.12457370816170867944272515615012,-0.20399969379664131818863381795381,-0.13623103824498866698533561248041,-0.10150077358836749608084204510305,-0.15550604312783883331761103363533,-0.00441510024586622574355176951144,-0.07866538617720082726680885798487,-0.13802647320529107255460132819280,-0.05666656202534951780602767712480,-0.09769884801380253336322567747629,0.77530737286041362388289144291775,-0.26625094925013637059407756169094,-0.20742839120341663439184287653916,-0.14235592542043887243075062087883},
    {-0.20072328254649710044255073171371,-0.35117527070779430697911038805614,-0.14761440316000859485079388377926,-0.24173072704495363050014589134662,-0.16142783015094985810122807379230,-0.12027398344823037046324998300406,-0.18426786906184708381140069377579,-0.00523170095281372433959621304211,-0.09321504674827056635688649066651,-0.16355534215961239907777269309008,-0.06714740097198727830640763158954,-0.11576886769925015530091627624643,-0.26625094925013637059407756169094,0.68450425419361993206734950945247,-0.24579358371660711690687151076418,-0.16868555393687775789679506033281},
    {-0.15637768688881922840572258337488,-0.27359046658236385596296713629272,-0.11500209953117167260838726861039,-0.18832539736134398800082578873116,-0.12576373980252680828684219704883,-0.09370197161946834663037719792555,-0.14355775157846198397670889335132,-0.00407586645214177284435308479260,-0.07262113895706658051043547175141,-0.12742122269400832368368980951345,-0.05231259229812087324651415087828,-0.09019216662298658315766175519457,-0.20742839120341663439184287653916,-0.24579358371660711690687151076418,0.80850934886035152882044485522783,-0.13141802187345927310779813979025},
    {-0.10732036344212275702503234242613,-0.18776226258414208114544408090296,-0.07892473257433095523705190998953,-0.12924574146291895049287745678157,-0.08631033321936643076810469210614,-0.06430667859024209731533261447112,-0.09852217653844876077418035720257,-0.00279722432073322606685406022109,-0.04983912463160065225986627979182,-0.08744784631251870110624224707863,-0.03590158244267603604438221509554,-0.06189793629888689502349663484893,-0.14235592542043887243075062087883,-0.16868555393687775789679506033281,-0.13141802187345927310779813979025,0.90980919240523128177500211677398}
    };
    /// large main matrix  8x8
    std::vector<std::vector<double>> matrixL8 = {
    {0.62629064942478773758693932904862,-0.09416715103291327382262210221597,-0.35471969015144244607995460683014,-0.28053200055520421951626985901385,-0.34837093544838138026165097471676,-0.05188665435741027232019462189783,-0.28029756253812393440583150550083,-0.43788931371110489942921617512184},
    {-0.09416715103291327382262210221597,0.97627179432356525623504239774775,-0.08938214306231669070701428836401,-0.07068835506841458782290033013851,-0.08778238607985459907023795267378,-0.01307438095928367162434913240077,-0.07062928145912898691971548714719,-0.11033919562479210796368533920031},
    {-0.35471969015144244607995460683014,-0.08938214306231669070701428836401,0.66330502999867602120787068997743,-0.26627705237062043730489335757738,-0.33066882080904119733943957726297,-0.04925008680763890561715712124169,-0.26605452708285215468464457444497,-0.41563841375965204782971795793856},
    {-0.28053200055520421951626985901385,-0.07068835506841458782290033013851,-0.26627705237062043730489335757738,0.78941334164003895690342460511602,-0.26151123943299220409031136114208,-0.03894969961708575484360395080330,-0.21041067302313037901129177953408,-0.32870990519248105554694916463632},
    {-0.34837093544838138026165097471676,-0.08778238607985459907023795267378,-0.33066882080904119733943957726297,-0.26151123943299220409031136114208,0.67524947267607871026484644971788,-0.04836861129633399092320189538441,-0.26129269689133727272434271071688,-0.40819933888618548101234750902222},
    {-0.05188665435741027232019462189783,-0.01307438095928367162434913240077,-0.04925008680763890561715712124169,-0.03894969961708575484360395080330,-0.04836861129633399092320189538441,0.99279593915361896705462640966289,-0.03891714971074340667644975155781,-0.06079754609393691472396525909971},
    {-0.28029756253812393440583150550083,-0.07062928145912898691971548714719,-0.26605452708285215468464457444497,-0.21041067302313037901129177953408,-0.26129269689133727272434271071688,-0.03891714971074340667644975155781,0.78976516524437012645165623325738,-0.32843520534285441936361849002424},
    {-0.43788931371110489942921617512184,-0.11033919562479210796368533920031,-0.41563841375965204782971795793856,-0.32870990519248105554694916463632,-0.40819933888618548101234750902222,-0.06079754609393691472396525909971,-0.32843520534285441936361849002424,0.48690860753886411327329142295639}
    };
        
    /// 16x16 time-varying matrix [slow,low]
    std::vector<std::vector<double>> tvmSL = {
    {0.99999999783091886307317963655805,-0.00001324004451550926340366257788,0.00004081139233853783057333688977,0.00002925705623220709728068630873,-0.00001559942690553348397563063199,-0.00001460018816002238774308993191,0.00002544043320295122004694524098,0.00002318609729981579211516296013},
    {0.00001323993553590558654815476092,0.99999999804710981710087480678339,0.00003504567279243615010803428178,0.00001387773805329257195185794355,0.00000394960300420198744147286599,0.00003356389174225092727425062700,-0.00002591626393191458644499336472,-0.00002226896284357653694042748771},
    {-0.00004081141743839499370742618378,-0.00003504562465181843044018106248,0.99999999771002034965050597747904,0.00000845022863595597642819793466,0.00003468944125053306641072448091,0.00000389747531825660947167036183,-0.00001518873885904757909239091301,0.00001286623250920488438281061305},
    {-0.00002925715741396564255230421103,-0.00001387744490101467954292976947,-0.00000845016302420207889554721464,0.99999999790902005525339291125420,-0.00002746604247208173362284656938,0.00001978990053944388802231735269,0.00003202313358806376246586122836,-0.00002984099604451757851053712856},
    {0.00001559965903274981426714258792,-0.00000394929926308884359864928570,-0.00003468944915949326919957923510,0.00002746585450289235283698359436,0.99999999799525673971345440804726,0.00003350454546193502912507927727,0.00001057305386275165806034704447,0.00002363186482082307602399680324},
    {0.00001460042599755654148599437470,-0.00003356403396809950475743536402,-0.00000389733912993576377825502913,-0.00001978956620108380704708452014,-0.00003350447852711656922426730620,0.99999999804457939678314914999646,-0.00002975273552912804787113319749,0.00001251130721752331494741466988},
    {-0.00002544021484968041218631060185,0.00002591623915209643203298901792,0.00001518873557270608901613451192,-0.00003202335365680980533561669765,-0.00001057287001760819506726227224,0.00002975266423085605704519987502,0.99999999774343228953199513853178,0.00003067702603483024787790756083},
    {-0.00002318592131616168677149016075,0.00002226902484123393816963475123,-0.00001286624789930341731917801812,0.00002984109890651679395951606510,-0.00002363193758176130104754937566,-0.00001251138535567280981068358225,-0.00003067691960705183992384401104,0.99999999812719775338365479910863}
    };
    /// 16x16 time-varying matrix [slow,high]
    std::vector<std::vector<double>> tvmSH = {
    {0.99999999769259639847973630821798,0.00001876890080636306939792720683,0.00003143204523212557400732580781,-0.00001355654856431540046383162762,-0.00000187067768332021803180599713,-0.00004338945327027343441123052870,-0.00000792909569488161462857186285,-0.00003379004915969042435654884349},
    {-0.00001876897283572476885274947500,0.99999999774463277368852232029894,-0.00004355218450755556823745032191,0.00000979414358123089395422554426,-0.00000592828657475904259029986579,-0.00001793890773907126396247840860,-0.00004023970089342629056832975620,-0.00001376806667529585322725521612},
    {-0.00003143207636218573966134168240,0.00004355217339593941088373221793,0.99999999769715752773180383883300,-0.00001354961437788282749988561654,-0.00003431911438618015551885176428,0.00001347745788530186193568231878,0.00000607152738157299272326802853,0.00001187513104058978053887904447},
    {0.00001355651428810816683137412120,-0.00000979415693350827029281524538,0.00001354957023007429881673001348,0.99999999771291070427281511001638,-0.00002421912122672005131880819395,-0.00002744572497506220370446471113,-0.00002189564846861517981367432906,0.00004787097281381691579130871483},
    {0.00000187061925580079744381542962,0.00000592841937826403843743655955,0.00003431915011469752917932021785,0.00002421904999967143572647473859,0.99999999774313674816283992186072,0.00003191324312180443789318043391,-0.00004040491196859380336773789888,-0.00000772674534184664766050133072},
    {0.00004338939329141520994705116809,0.00001793892487144193055169545670,-0.00001347747589233509420744011598,0.00002744576211489276201002489308,-0.00003191328436546005727775243699,0.99999999771840364370945053451578,0.00001175038776693618323022222372,-0.00001634951736226524074326732494},
    {0.00000792917812145746213987537732,0.00004023971914408047266965146038,-0.00000607146460073844643001239954,0.00002189556232939251262012946009,0.00004040489099154049093542973026,-0.00001175046750556197391185397905,0.99999999774613457237393276955117,0.00002321027925631347044958113779},
    {0.00003379005485497052122369557314,0.00001376805767128177972365155046,-0.00001187513146537101496374912862,-0.00004787100748444043175943221624,0.00000772670787223320324279846744,0.00001634947737108248161960570577,-0.00002321024522463431996968132032,0.99999999768514891140824829562916}
    };
    /// 16x16 time-varying matrix [fast,low]
    std::vector<std::vector<double>> tvmFL = {
    {0.99999999790507465569078249245649,0.00002646550651165878890254574973,-0.00002415301399509690467577553707,-0.00001814519981428606155136364075,0.00001995781022256782523557026854,0.00002336407750885745800996894095,0.00001803748361916797051827596188,-0.00003615613715239578823939375907},
    {-0.00002646550592571793021710174765,0.99999999769432479368447275192011,0.00001626113978224247476334074491,0.00003513163403299203549909682232,-0.00000318425920418195409000781775,0.00002353292601671799167350161708,-0.00003053693400809535338788838765,-0.00003026265965807909587704897791},
    {0.00002415299898601050676257354088,-0.00001626122771614942974852113799,0.99999999777616910279220974189229,-0.00000935944953786079652819501762,0.00003910204288920241568741284488,0.00002631381594607351439955855721,-0.00003283459114447408763552693767,0.00001458665967492454966774207553},
    {0.00001814505922703197351953871563,-0.00003513174290336991086904083748,0.00000935952867797784328817919941,0.99999999771554748395629985679989,-0.00002478554992279030603640095631,0.00003706668044944048007486789298,0.00002823742198399201773864088116,-0.00001149814430886841404516954257},
    {-0.00001995785344940840622205563415,0.00000318433027173366686206281047,-0.00003910205339197373678589153556,0.00002478563819544781030718150205,0.99999999778822801221878080468741,0.00002316224794465544784384872234,0.00001047210096717925915444681595,0.00003500906988069820243618737732},
    {-0.00002336397512625284613786182109,-0.00002353295769385031391924753552,-0.00002631395847439171959618146868,-0.00003706664581790614548849685517,-0.00002316224300227477225148746409,0.99999999770019754041783244247199,-0.00002940955253818624816298729630,-0.00000567075782460461835028826816},
    {-0.00001803760373496142145567297521,0.00003053693045665586963807389131,0.00003283453744441547340025822077,-0.00002823739725914182926947912367,-0.00001047211301809532558776318772,0.00002940956339702680490837995164,0.99999999764614200259416065819096,0.00002449105422880293260381318055},
    {0.00003615620053736640706091784447,0.00003026245698113248617871183510,-0.00001458651767790362711559645076,0.00001149830159301744532710735230,-0.00003500917487796958462147739466,0.00000567082595522728457107779904,-0.00002449105595646374622246024821,0.99999999778716153198132587931468}
    };
    /// 16x16 time-varying matrix [fast,high]
    std::vector<std::vector<double>> tvmFH = {
    {0.99999999793144389581556197299506,-0.00001286803683128959269112590730,-0.00001804390725822935874727952210,-0.00000542995865441935059999374255,-0.00001054347707991757417816947040,-0.00005600954223637418779918259459,-0.00001829394783468779071898373256,0.00000579280264826100315842753036},
    {0.00001286793274963733318190951121,0.99999999807449080346799519247725,0.00000212852232856311229949137706,-0.00002017296884433186483862737726,-0.00000807849773814718963359064741,-0.00001568091307373715875849752577,0.00003876426274282262628579492914,-0.00003821170274855239487902733297},
    {0.00001804393782956991261956156136,-0.00000212860971064362318022058704,0.99999999783922810525638169565354,-0.00003395031601848033745447499876,0.00000517678757689889250349565830,0.00001429511195747028349904705902,-0.00004247878269432479381769590665,-0.00002834093812773949948714651004},
    {0.00000543021706561158116392893508,0.00002017303496646083993946475810,0.00003395029703483859147890994157,0.99999999780313431063660800646176,-0.00005175799962768584281877504161,0.00000235766453595040663784084684,-0.00000891965032769325266964310223,0.00000637658361454225876827680425},
    {0.00001054340354739711528575529798,0.00000807852098486114083251974360,-0.00000517656421920461566230867861,0.00005175807381591964611861761414,0.99999999792065075165936605117167,-0.00000603501980944007003227749428,-0.00001196907114493444318123992198,-0.00003311944208562648774745243441},
    {0.00005600949649754044680884448870,0.00001568090335297745945941465251,-0.00001429533759330899640325931305,-0.00000235758833159651724623636498,0.00000603516914180680736967459996,0.99999999791061544573977926120278,0.00000504024896213814767081864282,0.00002289262783064147281446819304},
    {0.00001829408318574577882974219190,-0.00003876422841805941360516715721,0.00004247880356705372020603359018,0.00000891949506397315899995214411,0.00001196906013767324637275639432,-0.00000504020709359925954705155746,0.99999999804594752461639473040123,0.00000425414433453036518081565379},
    {-0.00000579284502486806445413882252,0.00003821166181875579456392322264,0.00002834088259716309901961074635,-0.00000637655496072714237482895877,0.00003311948214097757287868381559,-0.00002289269090217457987800064867,-0.00000425421591811982149520469237,0.99999999801168604207646239956375}
    };
    
    
    /// FDN matrix in use
    std::vector<std::vector<double>> matrixUse = std::vector<std::vector<double>>(MATDIM,std::vector<double>(MATDIM));
    
    /// rotational matrix in use
    std::vector<std::vector<double>>* ptrRotmatUse;
    
    /// output vector matching size
    std::vector<SignalType> outVec = std::vector<SignalType>(MATDIM);
    
    /// outvalue
    SignalType outSamp = 0.0f;
    
    /** which rotational matrix to use
     three bytes: frequency switch, amplitude switch, new switch switch
    */
    std::vector<bool> faSwitch = {0,0,0};
    
    void init()
    {
        // populate large main matrix
        /*
        for (int i=0;i<MATDIM;i++)
        {
            for(int j=0;j<MATDIM;j++)
            {
                if((i>=0&&i<4&&j>=0&&j<4)||
                   (i>=4&&i<8&&j>=4&&j<8)||
                   (i>=8&&i<12&&j>=8&&j<12)||
                   (i>=12&&i<16&&j>=12&&j<16))
                {
                    matrixL16[i][j] = gmat * matrix0[i%4][i%4];
                }
            }
        }
        
        // copy matrix in use -- matrixL not used for this version
         
        matrixUse = matrixL16;
         */
        if (MATDIM==8) matrixUse = matrixL8;
        else if (MATDIM==16) matrixUse = matrixL16;
        //ptrRotmatUse = &tvmFH;
        
        clearStorage();
        
    }
    
    void checkModStrategyInject()
    {
        // check if new fdn modulation strategy is injected
        if (faSwitch[2])
        {
            // reset matrix in use to default -- matrixL not used in this version
            //matrixUse = matrixL;
            // switch to new rotational matrix strategy
            if (faSwitch[0]==0/*slow*/){
                if (faSwitch[1]==0/*low*/){
                    ptrRotmatUse = &tvmSL;
                }else/*high*/{
                    ptrRotmatUse = &tvmSH;
                }
            }else/*fast*/{
                if (faSwitch[1]==0/*low*/){
                    ptrRotmatUse = &tvmFL;
                }else/*high*/{
                    ptrRotmatUse = &tvmFH;
                }
            }
            // switch it off
            faSwitch[2] = false;
        }
    }
    
    /// M-by-M x M-by-M = M-by-M -- trying (using now)
    void tinyRotateTick()
    {
        std::vector<std::vector<double>> matout(MATDIM, std::vector<double>(MATDIM, 0.0f));
        for (int m=0;m<MATDIM;m++) {
            for (int n=0;n<MATDIM;n++) {
                for (int i=0;i<MATDIM;i++) {
                    matout[m][n] += matrixUse[m][i] * (*ptrRotmatUse)[n][i];
                }
            }
        }
        matrixUse = matout;
    }
    
    /// 1-by-M x M-by-M = M-by-1, pass by reference
    void vecTick(std::vector<SignalType>& vecIn)
    {
        clearStorage();
        for(int m=0;m<MATDIM;m++){
            for(int n=0;n<MATDIM;n++){
                outputVecStore[m] += (double)vecIn[n] * matrixUse[m][n];
                
            }
            vecIn[m] = outputVecStore[m];
        }
    }
    
    void clearStorage()
    {
        //clear outputvecstorage
        for (int i=0;i<MATDIM;i++)
        {
            outputVecStore[i] = 0.0f;
        }
    }
    
    
};
